// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LOBBY.proto

#ifndef PROTOBUF_LOBBY_2eproto__INCLUDED
#define PROTOBUF_LOBBY_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace LOBBY {
class CHARACTER_INFO;
class CHARACTER_INFODefaultTypeInternal;
extern CHARACTER_INFODefaultTypeInternal _CHARACTER_INFO_default_instance_;
class CS_CHARACTER_INFO;
class CS_CHARACTER_INFODefaultTypeInternal;
extern CS_CHARACTER_INFODefaultTypeInternal _CS_CHARACTER_INFO_default_instance_;
class CS_CHARACTER_SELECT;
class CS_CHARACTER_SELECTDefaultTypeInternal;
extern CS_CHARACTER_SELECTDefaultTypeInternal _CS_CHARACTER_SELECT_default_instance_;
class CS_CHARACTER_UPGRADE;
class CS_CHARACTER_UPGRADEDefaultTypeInternal;
extern CS_CHARACTER_UPGRADEDefaultTypeInternal _CS_CHARACTER_UPGRADE_default_instance_;
class CS_ENTER_FIELD;
class CS_ENTER_FIELDDefaultTypeInternal;
extern CS_ENTER_FIELDDefaultTypeInternal _CS_ENTER_FIELD_default_instance_;
class CS_FIELD_LIST;
class CS_FIELD_LISTDefaultTypeInternal;
extern CS_FIELD_LISTDefaultTypeInternal _CS_FIELD_LIST_default_instance_;
class CS_LEAVE_FIELD;
class CS_LEAVE_FIELDDefaultTypeInternal;
extern CS_LEAVE_FIELDDefaultTypeInternal _CS_LEAVE_FIELD_default_instance_;
class CS_LOG_IN;
class CS_LOG_INDefaultTypeInternal;
extern CS_LOG_INDefaultTypeInternal _CS_LOG_IN_default_instance_;
class CS_MY_CHARACTER_INFO;
class CS_MY_CHARACTER_INFODefaultTypeInternal;
extern CS_MY_CHARACTER_INFODefaultTypeInternal _CS_MY_CHARACTER_INFO_default_instance_;
class CS_MY_INFO;
class CS_MY_INFODefaultTypeInternal;
extern CS_MY_INFODefaultTypeInternal _CS_MY_INFO_default_instance_;
class CS_PURCHASE_CHARACTER;
class CS_PURCHASE_CHARACTERDefaultTypeInternal;
extern CS_PURCHASE_CHARACTERDefaultTypeInternal _CS_PURCHASE_CHARACTER_default_instance_;
class FIELD_INFO;
class FIELD_INFODefaultTypeInternal;
extern FIELD_INFODefaultTypeInternal _FIELD_INFO_default_instance_;
class SC_CHARACTER_INFO;
class SC_CHARACTER_INFODefaultTypeInternal;
extern SC_CHARACTER_INFODefaultTypeInternal _SC_CHARACTER_INFO_default_instance_;
class SC_CHARACTER_SELECT;
class SC_CHARACTER_SELECTDefaultTypeInternal;
extern SC_CHARACTER_SELECTDefaultTypeInternal _SC_CHARACTER_SELECT_default_instance_;
class SC_CHARACTER_UPGRADE;
class SC_CHARACTER_UPGRADEDefaultTypeInternal;
extern SC_CHARACTER_UPGRADEDefaultTypeInternal _SC_CHARACTER_UPGRADE_default_instance_;
class SC_ENTER_FIELD;
class SC_ENTER_FIELDDefaultTypeInternal;
extern SC_ENTER_FIELDDefaultTypeInternal _SC_ENTER_FIELD_default_instance_;
class SC_FIELD_LIST;
class SC_FIELD_LISTDefaultTypeInternal;
extern SC_FIELD_LISTDefaultTypeInternal _SC_FIELD_LIST_default_instance_;
class SC_LEAVE_FIELD;
class SC_LEAVE_FIELDDefaultTypeInternal;
extern SC_LEAVE_FIELDDefaultTypeInternal _SC_LEAVE_FIELD_default_instance_;
class SC_LOG_IN;
class SC_LOG_INDefaultTypeInternal;
extern SC_LOG_INDefaultTypeInternal _SC_LOG_IN_default_instance_;
class SC_MY_CHARACTER_INFO;
class SC_MY_CHARACTER_INFODefaultTypeInternal;
extern SC_MY_CHARACTER_INFODefaultTypeInternal _SC_MY_CHARACTER_INFO_default_instance_;
class SC_MY_INFO;
class SC_MY_INFODefaultTypeInternal;
extern SC_MY_INFODefaultTypeInternal _SC_MY_INFO_default_instance_;
class SC_PURCHASE_CHARACTER;
class SC_PURCHASE_CHARACTERDefaultTypeInternal;
extern SC_PURCHASE_CHARACTERDefaultTypeInternal _SC_PURCHASE_CHARACTER_default_instance_;
}  // namespace LOBBY

namespace LOBBY {

namespace protobuf_LOBBY_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_LOBBY_2eproto

enum GameDataType {
  test_1 = 0,
  test_2 = 1,
  test_3 = 2,
  GameDataType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  GameDataType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool GameDataType_IsValid(int value);
const GameDataType GameDataType_MIN = test_1;
const GameDataType GameDataType_MAX = test_3;
const int GameDataType_ARRAYSIZE = GameDataType_MAX + 1;

const ::google::protobuf::EnumDescriptor* GameDataType_descriptor();
inline const ::std::string& GameDataType_Name(GameDataType value) {
  return ::google::protobuf::internal::NameOfEnum(
    GameDataType_descriptor(), value);
}
inline bool GameDataType_Parse(
    const ::std::string& name, GameDataType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GameDataType>(
    GameDataType_descriptor(), name, value);
}
// ===================================================================

class CS_LOG_IN : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LOBBY.CS_LOG_IN) */ {
 public:
  CS_LOG_IN();
  virtual ~CS_LOG_IN();

  CS_LOG_IN(const CS_LOG_IN& from);

  inline CS_LOG_IN& operator=(const CS_LOG_IN& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CS_LOG_IN& default_instance();

  static inline const CS_LOG_IN* internal_default_instance() {
    return reinterpret_cast<const CS_LOG_IN*>(
               &_CS_LOG_IN_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(CS_LOG_IN* other);

  // implements Message ----------------------------------------------

  inline CS_LOG_IN* New() const PROTOBUF_FINAL { return New(NULL); }

  CS_LOG_IN* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CS_LOG_IN& from);
  void MergeFrom(const CS_LOG_IN& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CS_LOG_IN* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string password = 2;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:LOBBY.CS_LOG_IN)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  mutable int _cached_size_;
  friend struct protobuf_LOBBY_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SC_LOG_IN : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LOBBY.SC_LOG_IN) */ {
 public:
  SC_LOG_IN();
  virtual ~SC_LOG_IN();

  SC_LOG_IN(const SC_LOG_IN& from);

  inline SC_LOG_IN& operator=(const SC_LOG_IN& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_LOG_IN& default_instance();

  static inline const SC_LOG_IN* internal_default_instance() {
    return reinterpret_cast<const SC_LOG_IN*>(
               &_SC_LOG_IN_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(SC_LOG_IN* other);

  // implements Message ----------------------------------------------

  inline SC_LOG_IN* New() const PROTOBUF_FINAL { return New(NULL); }

  SC_LOG_IN* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SC_LOG_IN& from);
  void MergeFrom(const SC_LOG_IN& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SC_LOG_IN* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string nickname = 3;
  void clear_nickname();
  static const int kNicknameFieldNumber = 3;
  const ::std::string& nickname() const;
  void set_nickname(const ::std::string& value);
  #if LANG_CXX11
  void set_nickname(::std::string&& value);
  #endif
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  ::std::string* mutable_nickname();
  ::std::string* release_nickname();
  void set_allocated_nickname(::std::string* nickname);

  // int64 timestamp = 2;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // bool result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  bool result() const;
  void set_result(bool value);

  // int32 medal_count = 4;
  void clear_medal_count();
  static const int kMedalCountFieldNumber = 4;
  ::google::protobuf::int32 medal_count() const;
  void set_medal_count(::google::protobuf::int32 value);

  // int32 coin_count = 5;
  void clear_coin_count();
  static const int kCoinCountFieldNumber = 5;
  ::google::protobuf::int32 coin_count() const;
  void set_coin_count(::google::protobuf::int32 value);

  // int32 character_type = 6;
  void clear_character_type();
  static const int kCharacterTypeFieldNumber = 6;
  ::google::protobuf::int32 character_type() const;
  void set_character_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:LOBBY.SC_LOG_IN)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr nickname_;
  ::google::protobuf::int64 timestamp_;
  bool result_;
  ::google::protobuf::int32 medal_count_;
  ::google::protobuf::int32 coin_count_;
  ::google::protobuf::int32 character_type_;
  mutable int _cached_size_;
  friend struct protobuf_LOBBY_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FIELD_INFO : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LOBBY.FIELD_INFO) */ {
 public:
  FIELD_INFO();
  virtual ~FIELD_INFO();

  FIELD_INFO(const FIELD_INFO& from);

  inline FIELD_INFO& operator=(const FIELD_INFO& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FIELD_INFO& default_instance();

  static inline const FIELD_INFO* internal_default_instance() {
    return reinterpret_cast<const FIELD_INFO*>(
               &_FIELD_INFO_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(FIELD_INFO* other);

  // implements Message ----------------------------------------------

  inline FIELD_INFO* New() const PROTOBUF_FINAL { return New(NULL); }

  FIELD_INFO* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FIELD_INFO& from);
  void MergeFrom(const FIELD_INFO& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FIELD_INFO* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 field_id = 1;
  void clear_field_id();
  static const int kFieldIdFieldNumber = 1;
  ::google::protobuf::int32 field_id() const;
  void set_field_id(::google::protobuf::int32 value);

  // int32 user_count = 2;
  void clear_user_count();
  static const int kUserCountFieldNumber = 2;
  ::google::protobuf::int32 user_count() const;
  void set_user_count(::google::protobuf::int32 value);

  // int32 max_user_count = 3;
  void clear_max_user_count();
  static const int kMaxUserCountFieldNumber = 3;
  ::google::protobuf::int32 max_user_count() const;
  void set_max_user_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:LOBBY.FIELD_INFO)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 field_id_;
  ::google::protobuf::int32 user_count_;
  ::google::protobuf::int32 max_user_count_;
  mutable int _cached_size_;
  friend struct protobuf_LOBBY_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CS_FIELD_LIST : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LOBBY.CS_FIELD_LIST) */ {
 public:
  CS_FIELD_LIST();
  virtual ~CS_FIELD_LIST();

  CS_FIELD_LIST(const CS_FIELD_LIST& from);

  inline CS_FIELD_LIST& operator=(const CS_FIELD_LIST& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CS_FIELD_LIST& default_instance();

  static inline const CS_FIELD_LIST* internal_default_instance() {
    return reinterpret_cast<const CS_FIELD_LIST*>(
               &_CS_FIELD_LIST_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(CS_FIELD_LIST* other);

  // implements Message ----------------------------------------------

  inline CS_FIELD_LIST* New() const PROTOBUF_FINAL { return New(NULL); }

  CS_FIELD_LIST* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CS_FIELD_LIST& from);
  void MergeFrom(const CS_FIELD_LIST& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CS_FIELD_LIST* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:LOBBY.CS_FIELD_LIST)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_LOBBY_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SC_FIELD_LIST : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LOBBY.SC_FIELD_LIST) */ {
 public:
  SC_FIELD_LIST();
  virtual ~SC_FIELD_LIST();

  SC_FIELD_LIST(const SC_FIELD_LIST& from);

  inline SC_FIELD_LIST& operator=(const SC_FIELD_LIST& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_FIELD_LIST& default_instance();

  static inline const SC_FIELD_LIST* internal_default_instance() {
    return reinterpret_cast<const SC_FIELD_LIST*>(
               &_SC_FIELD_LIST_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(SC_FIELD_LIST* other);

  // implements Message ----------------------------------------------

  inline SC_FIELD_LIST* New() const PROTOBUF_FINAL { return New(NULL); }

  SC_FIELD_LIST* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SC_FIELD_LIST& from);
  void MergeFrom(const SC_FIELD_LIST& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SC_FIELD_LIST* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .LOBBY.FIELD_INFO field_infos = 2;
  int field_infos_size() const;
  void clear_field_infos();
  static const int kFieldInfosFieldNumber = 2;
  const ::LOBBY::FIELD_INFO& field_infos(int index) const;
  ::LOBBY::FIELD_INFO* mutable_field_infos(int index);
  ::LOBBY::FIELD_INFO* add_field_infos();
  ::google::protobuf::RepeatedPtrField< ::LOBBY::FIELD_INFO >*
      mutable_field_infos();
  const ::google::protobuf::RepeatedPtrField< ::LOBBY::FIELD_INFO >&
      field_infos() const;

  // bool result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:LOBBY.SC_FIELD_LIST)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::LOBBY::FIELD_INFO > field_infos_;
  bool result_;
  mutable int _cached_size_;
  friend struct protobuf_LOBBY_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CS_ENTER_FIELD : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LOBBY.CS_ENTER_FIELD) */ {
 public:
  CS_ENTER_FIELD();
  virtual ~CS_ENTER_FIELD();

  CS_ENTER_FIELD(const CS_ENTER_FIELD& from);

  inline CS_ENTER_FIELD& operator=(const CS_ENTER_FIELD& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CS_ENTER_FIELD& default_instance();

  static inline const CS_ENTER_FIELD* internal_default_instance() {
    return reinterpret_cast<const CS_ENTER_FIELD*>(
               &_CS_ENTER_FIELD_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(CS_ENTER_FIELD* other);

  // implements Message ----------------------------------------------

  inline CS_ENTER_FIELD* New() const PROTOBUF_FINAL { return New(NULL); }

  CS_ENTER_FIELD* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CS_ENTER_FIELD& from);
  void MergeFrom(const CS_ENTER_FIELD& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CS_ENTER_FIELD* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 field_id = 1;
  void clear_field_id();
  static const int kFieldIdFieldNumber = 1;
  ::google::protobuf::int32 field_id() const;
  void set_field_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:LOBBY.CS_ENTER_FIELD)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 field_id_;
  mutable int _cached_size_;
  friend struct protobuf_LOBBY_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SC_ENTER_FIELD : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LOBBY.SC_ENTER_FIELD) */ {
 public:
  SC_ENTER_FIELD();
  virtual ~SC_ENTER_FIELD();

  SC_ENTER_FIELD(const SC_ENTER_FIELD& from);

  inline SC_ENTER_FIELD& operator=(const SC_ENTER_FIELD& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_ENTER_FIELD& default_instance();

  static inline const SC_ENTER_FIELD* internal_default_instance() {
    return reinterpret_cast<const SC_ENTER_FIELD*>(
               &_SC_ENTER_FIELD_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(SC_ENTER_FIELD* other);

  // implements Message ----------------------------------------------

  inline SC_ENTER_FIELD* New() const PROTOBUF_FINAL { return New(NULL); }

  SC_ENTER_FIELD* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SC_ENTER_FIELD& from);
  void MergeFrom(const SC_ENTER_FIELD& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SC_ENTER_FIELD* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ec = 3;
  void clear_ec();
  static const int kEcFieldNumber = 3;
  const ::std::string& ec() const;
  void set_ec(const ::std::string& value);
  #if LANG_CXX11
  void set_ec(::std::string&& value);
  #endif
  void set_ec(const char* value);
  void set_ec(const char* value, size_t size);
  ::std::string* mutable_ec();
  ::std::string* release_ec();
  void set_allocated_ec(::std::string* ec);

  // bool result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  bool result() const;
  void set_result(bool value);

  // int32 field_id = 2;
  void clear_field_id();
  static const int kFieldIdFieldNumber = 2;
  ::google::protobuf::int32 field_id() const;
  void set_field_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:LOBBY.SC_ENTER_FIELD)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ec_;
  bool result_;
  ::google::protobuf::int32 field_id_;
  mutable int _cached_size_;
  friend struct protobuf_LOBBY_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CS_LEAVE_FIELD : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LOBBY.CS_LEAVE_FIELD) */ {
 public:
  CS_LEAVE_FIELD();
  virtual ~CS_LEAVE_FIELD();

  CS_LEAVE_FIELD(const CS_LEAVE_FIELD& from);

  inline CS_LEAVE_FIELD& operator=(const CS_LEAVE_FIELD& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CS_LEAVE_FIELD& default_instance();

  static inline const CS_LEAVE_FIELD* internal_default_instance() {
    return reinterpret_cast<const CS_LEAVE_FIELD*>(
               &_CS_LEAVE_FIELD_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(CS_LEAVE_FIELD* other);

  // implements Message ----------------------------------------------

  inline CS_LEAVE_FIELD* New() const PROTOBUF_FINAL { return New(NULL); }

  CS_LEAVE_FIELD* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CS_LEAVE_FIELD& from);
  void MergeFrom(const CS_LEAVE_FIELD& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CS_LEAVE_FIELD* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 field_id = 1;
  void clear_field_id();
  static const int kFieldIdFieldNumber = 1;
  ::google::protobuf::int32 field_id() const;
  void set_field_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:LOBBY.CS_LEAVE_FIELD)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 field_id_;
  mutable int _cached_size_;
  friend struct protobuf_LOBBY_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SC_LEAVE_FIELD : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LOBBY.SC_LEAVE_FIELD) */ {
 public:
  SC_LEAVE_FIELD();
  virtual ~SC_LEAVE_FIELD();

  SC_LEAVE_FIELD(const SC_LEAVE_FIELD& from);

  inline SC_LEAVE_FIELD& operator=(const SC_LEAVE_FIELD& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_LEAVE_FIELD& default_instance();

  static inline const SC_LEAVE_FIELD* internal_default_instance() {
    return reinterpret_cast<const SC_LEAVE_FIELD*>(
               &_SC_LEAVE_FIELD_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(SC_LEAVE_FIELD* other);

  // implements Message ----------------------------------------------

  inline SC_LEAVE_FIELD* New() const PROTOBUF_FINAL { return New(NULL); }

  SC_LEAVE_FIELD* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SC_LEAVE_FIELD& from);
  void MergeFrom(const SC_LEAVE_FIELD& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SC_LEAVE_FIELD* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ec = 2;
  void clear_ec();
  static const int kEcFieldNumber = 2;
  const ::std::string& ec() const;
  void set_ec(const ::std::string& value);
  #if LANG_CXX11
  void set_ec(::std::string&& value);
  #endif
  void set_ec(const char* value);
  void set_ec(const char* value, size_t size);
  ::std::string* mutable_ec();
  ::std::string* release_ec();
  void set_allocated_ec(::std::string* ec);

  // bool result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:LOBBY.SC_LEAVE_FIELD)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ec_;
  bool result_;
  mutable int _cached_size_;
  friend struct protobuf_LOBBY_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CS_PURCHASE_CHARACTER : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LOBBY.CS_PURCHASE_CHARACTER) */ {
 public:
  CS_PURCHASE_CHARACTER();
  virtual ~CS_PURCHASE_CHARACTER();

  CS_PURCHASE_CHARACTER(const CS_PURCHASE_CHARACTER& from);

  inline CS_PURCHASE_CHARACTER& operator=(const CS_PURCHASE_CHARACTER& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CS_PURCHASE_CHARACTER& default_instance();

  static inline const CS_PURCHASE_CHARACTER* internal_default_instance() {
    return reinterpret_cast<const CS_PURCHASE_CHARACTER*>(
               &_CS_PURCHASE_CHARACTER_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(CS_PURCHASE_CHARACTER* other);

  // implements Message ----------------------------------------------

  inline CS_PURCHASE_CHARACTER* New() const PROTOBUF_FINAL { return New(NULL); }

  CS_PURCHASE_CHARACTER* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CS_PURCHASE_CHARACTER& from);
  void MergeFrom(const CS_PURCHASE_CHARACTER& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CS_PURCHASE_CHARACTER* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 character_type = 1;
  void clear_character_type();
  static const int kCharacterTypeFieldNumber = 1;
  ::google::protobuf::int32 character_type() const;
  void set_character_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:LOBBY.CS_PURCHASE_CHARACTER)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 character_type_;
  mutable int _cached_size_;
  friend struct protobuf_LOBBY_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SC_PURCHASE_CHARACTER : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LOBBY.SC_PURCHASE_CHARACTER) */ {
 public:
  SC_PURCHASE_CHARACTER();
  virtual ~SC_PURCHASE_CHARACTER();

  SC_PURCHASE_CHARACTER(const SC_PURCHASE_CHARACTER& from);

  inline SC_PURCHASE_CHARACTER& operator=(const SC_PURCHASE_CHARACTER& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_PURCHASE_CHARACTER& default_instance();

  static inline const SC_PURCHASE_CHARACTER* internal_default_instance() {
    return reinterpret_cast<const SC_PURCHASE_CHARACTER*>(
               &_SC_PURCHASE_CHARACTER_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(SC_PURCHASE_CHARACTER* other);

  // implements Message ----------------------------------------------

  inline SC_PURCHASE_CHARACTER* New() const PROTOBUF_FINAL { return New(NULL); }

  SC_PURCHASE_CHARACTER* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SC_PURCHASE_CHARACTER& from);
  void MergeFrom(const SC_PURCHASE_CHARACTER& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SC_PURCHASE_CHARACTER* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ec = 4;
  void clear_ec();
  static const int kEcFieldNumber = 4;
  const ::std::string& ec() const;
  void set_ec(const ::std::string& value);
  #if LANG_CXX11
  void set_ec(::std::string&& value);
  #endif
  void set_ec(const char* value);
  void set_ec(const char* value, size_t size);
  ::std::string* mutable_ec();
  ::std::string* release_ec();
  void set_allocated_ec(::std::string* ec);

  // int32 medal_count = 1;
  void clear_medal_count();
  static const int kMedalCountFieldNumber = 1;
  ::google::protobuf::int32 medal_count() const;
  void set_medal_count(::google::protobuf::int32 value);

  // int32 coin_count = 2;
  void clear_coin_count();
  static const int kCoinCountFieldNumber = 2;
  ::google::protobuf::int32 coin_count() const;
  void set_coin_count(::google::protobuf::int32 value);

  // bool result = 3;
  void clear_result();
  static const int kResultFieldNumber = 3;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:LOBBY.SC_PURCHASE_CHARACTER)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ec_;
  ::google::protobuf::int32 medal_count_;
  ::google::protobuf::int32 coin_count_;
  bool result_;
  mutable int _cached_size_;
  friend struct protobuf_LOBBY_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CS_CHARACTER_INFO : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LOBBY.CS_CHARACTER_INFO) */ {
 public:
  CS_CHARACTER_INFO();
  virtual ~CS_CHARACTER_INFO();

  CS_CHARACTER_INFO(const CS_CHARACTER_INFO& from);

  inline CS_CHARACTER_INFO& operator=(const CS_CHARACTER_INFO& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CS_CHARACTER_INFO& default_instance();

  static inline const CS_CHARACTER_INFO* internal_default_instance() {
    return reinterpret_cast<const CS_CHARACTER_INFO*>(
               &_CS_CHARACTER_INFO_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(CS_CHARACTER_INFO* other);

  // implements Message ----------------------------------------------

  inline CS_CHARACTER_INFO* New() const PROTOBUF_FINAL { return New(NULL); }

  CS_CHARACTER_INFO* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CS_CHARACTER_INFO& from);
  void MergeFrom(const CS_CHARACTER_INFO& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CS_CHARACTER_INFO* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 character_type = 1;
  void clear_character_type();
  static const int kCharacterTypeFieldNumber = 1;
  ::google::protobuf::int32 character_type() const;
  void set_character_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:LOBBY.CS_CHARACTER_INFO)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 character_type_;
  mutable int _cached_size_;
  friend struct protobuf_LOBBY_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SC_CHARACTER_INFO : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LOBBY.SC_CHARACTER_INFO) */ {
 public:
  SC_CHARACTER_INFO();
  virtual ~SC_CHARACTER_INFO();

  SC_CHARACTER_INFO(const SC_CHARACTER_INFO& from);

  inline SC_CHARACTER_INFO& operator=(const SC_CHARACTER_INFO& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_CHARACTER_INFO& default_instance();

  static inline const SC_CHARACTER_INFO* internal_default_instance() {
    return reinterpret_cast<const SC_CHARACTER_INFO*>(
               &_SC_CHARACTER_INFO_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(SC_CHARACTER_INFO* other);

  // implements Message ----------------------------------------------

  inline SC_CHARACTER_INFO* New() const PROTOBUF_FINAL { return New(NULL); }

  SC_CHARACTER_INFO* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SC_CHARACTER_INFO& from);
  void MergeFrom(const SC_CHARACTER_INFO& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SC_CHARACTER_INFO* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ec = 2;
  void clear_ec();
  static const int kEcFieldNumber = 2;
  const ::std::string& ec() const;
  void set_ec(const ::std::string& value);
  #if LANG_CXX11
  void set_ec(::std::string&& value);
  #endif
  void set_ec(const char* value);
  void set_ec(const char* value, size_t size);
  ::std::string* mutable_ec();
  ::std::string* release_ec();
  void set_allocated_ec(::std::string* ec);

  // bool result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  bool result() const;
  void set_result(bool value);

  // int32 character_type = 3;
  void clear_character_type();
  static const int kCharacterTypeFieldNumber = 3;
  ::google::protobuf::int32 character_type() const;
  void set_character_type(::google::protobuf::int32 value);

  // int32 max_hp = 4;
  void clear_max_hp();
  static const int kMaxHpFieldNumber = 4;
  ::google::protobuf::int32 max_hp() const;
  void set_max_hp(::google::protobuf::int32 value);

  // int32 speed = 5;
  void clear_speed();
  static const int kSpeedFieldNumber = 5;
  ::google::protobuf::int32 speed() const;
  void set_speed(::google::protobuf::int32 value);

  // int32 bullet_speed = 6;
  void clear_bullet_speed();
  static const int kBulletSpeedFieldNumber = 6;
  ::google::protobuf::int32 bullet_speed() const;
  void set_bullet_speed(::google::protobuf::int32 value);

  // int32 bullet_power = 7;
  void clear_bullet_power();
  static const int kBulletPowerFieldNumber = 7;
  ::google::protobuf::int32 bullet_power() const;
  void set_bullet_power(::google::protobuf::int32 value);

  // int32 bullet_distance = 8;
  void clear_bullet_distance();
  static const int kBulletDistanceFieldNumber = 8;
  ::google::protobuf::int32 bullet_distance() const;
  void set_bullet_distance(::google::protobuf::int32 value);

  // int32 reload_time = 9;
  void clear_reload_time();
  static const int kReloadTimeFieldNumber = 9;
  ::google::protobuf::int32 reload_time() const;
  void set_reload_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:LOBBY.SC_CHARACTER_INFO)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ec_;
  bool result_;
  ::google::protobuf::int32 character_type_;
  ::google::protobuf::int32 max_hp_;
  ::google::protobuf::int32 speed_;
  ::google::protobuf::int32 bullet_speed_;
  ::google::protobuf::int32 bullet_power_;
  ::google::protobuf::int32 bullet_distance_;
  ::google::protobuf::int32 reload_time_;
  mutable int _cached_size_;
  friend struct protobuf_LOBBY_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CS_MY_INFO : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LOBBY.CS_MY_INFO) */ {
 public:
  CS_MY_INFO();
  virtual ~CS_MY_INFO();

  CS_MY_INFO(const CS_MY_INFO& from);

  inline CS_MY_INFO& operator=(const CS_MY_INFO& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CS_MY_INFO& default_instance();

  static inline const CS_MY_INFO* internal_default_instance() {
    return reinterpret_cast<const CS_MY_INFO*>(
               &_CS_MY_INFO_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(CS_MY_INFO* other);

  // implements Message ----------------------------------------------

  inline CS_MY_INFO* New() const PROTOBUF_FINAL { return New(NULL); }

  CS_MY_INFO* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CS_MY_INFO& from);
  void MergeFrom(const CS_MY_INFO& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CS_MY_INFO* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:LOBBY.CS_MY_INFO)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_LOBBY_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SC_MY_INFO : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LOBBY.SC_MY_INFO) */ {
 public:
  SC_MY_INFO();
  virtual ~SC_MY_INFO();

  SC_MY_INFO(const SC_MY_INFO& from);

  inline SC_MY_INFO& operator=(const SC_MY_INFO& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_MY_INFO& default_instance();

  static inline const SC_MY_INFO* internal_default_instance() {
    return reinterpret_cast<const SC_MY_INFO*>(
               &_SC_MY_INFO_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(SC_MY_INFO* other);

  // implements Message ----------------------------------------------

  inline SC_MY_INFO* New() const PROTOBUF_FINAL { return New(NULL); }

  SC_MY_INFO* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SC_MY_INFO& from);
  void MergeFrom(const SC_MY_INFO& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SC_MY_INFO* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ec = 4;
  void clear_ec();
  static const int kEcFieldNumber = 4;
  const ::std::string& ec() const;
  void set_ec(const ::std::string& value);
  #if LANG_CXX11
  void set_ec(::std::string&& value);
  #endif
  void set_ec(const char* value);
  void set_ec(const char* value, size_t size);
  ::std::string* mutable_ec();
  ::std::string* release_ec();
  void set_allocated_ec(::std::string* ec);

  // int32 medal_count = 1;
  void clear_medal_count();
  static const int kMedalCountFieldNumber = 1;
  ::google::protobuf::int32 medal_count() const;
  void set_medal_count(::google::protobuf::int32 value);

  // int32 coin_count = 2;
  void clear_coin_count();
  static const int kCoinCountFieldNumber = 2;
  ::google::protobuf::int32 coin_count() const;
  void set_coin_count(::google::protobuf::int32 value);

  // bool result = 3;
  void clear_result();
  static const int kResultFieldNumber = 3;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:LOBBY.SC_MY_INFO)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ec_;
  ::google::protobuf::int32 medal_count_;
  ::google::protobuf::int32 coin_count_;
  bool result_;
  mutable int _cached_size_;
  friend struct protobuf_LOBBY_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CHARACTER_INFO : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LOBBY.CHARACTER_INFO) */ {
 public:
  CHARACTER_INFO();
  virtual ~CHARACTER_INFO();

  CHARACTER_INFO(const CHARACTER_INFO& from);

  inline CHARACTER_INFO& operator=(const CHARACTER_INFO& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CHARACTER_INFO& default_instance();

  static inline const CHARACTER_INFO* internal_default_instance() {
    return reinterpret_cast<const CHARACTER_INFO*>(
               &_CHARACTER_INFO_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(CHARACTER_INFO* other);

  // implements Message ----------------------------------------------

  inline CHARACTER_INFO* New() const PROTOBUF_FINAL { return New(NULL); }

  CHARACTER_INFO* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CHARACTER_INFO& from);
  void MergeFrom(const CHARACTER_INFO& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CHARACTER_INFO* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // int32 max_hp = 2;
  void clear_max_hp();
  static const int kMaxHpFieldNumber = 2;
  ::google::protobuf::int32 max_hp() const;
  void set_max_hp(::google::protobuf::int32 value);

  // int32 speed = 3;
  void clear_speed();
  static const int kSpeedFieldNumber = 3;
  ::google::protobuf::int32 speed() const;
  void set_speed(::google::protobuf::int32 value);

  // int32 bullet_speed = 4;
  void clear_bullet_speed();
  static const int kBulletSpeedFieldNumber = 4;
  ::google::protobuf::int32 bullet_speed() const;
  void set_bullet_speed(::google::protobuf::int32 value);

  // int32 bullet_power = 5;
  void clear_bullet_power();
  static const int kBulletPowerFieldNumber = 5;
  ::google::protobuf::int32 bullet_power() const;
  void set_bullet_power(::google::protobuf::int32 value);

  // int32 bullet_distance = 6;
  void clear_bullet_distance();
  static const int kBulletDistanceFieldNumber = 6;
  ::google::protobuf::int32 bullet_distance() const;
  void set_bullet_distance(::google::protobuf::int32 value);

  // int32 reload_time = 7;
  void clear_reload_time();
  static const int kReloadTimeFieldNumber = 7;
  ::google::protobuf::int32 reload_time() const;
  void set_reload_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:LOBBY.CHARACTER_INFO)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 max_hp_;
  ::google::protobuf::int32 speed_;
  ::google::protobuf::int32 bullet_speed_;
  ::google::protobuf::int32 bullet_power_;
  ::google::protobuf::int32 bullet_distance_;
  ::google::protobuf::int32 reload_time_;
  mutable int _cached_size_;
  friend struct protobuf_LOBBY_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CS_MY_CHARACTER_INFO : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LOBBY.CS_MY_CHARACTER_INFO) */ {
 public:
  CS_MY_CHARACTER_INFO();
  virtual ~CS_MY_CHARACTER_INFO();

  CS_MY_CHARACTER_INFO(const CS_MY_CHARACTER_INFO& from);

  inline CS_MY_CHARACTER_INFO& operator=(const CS_MY_CHARACTER_INFO& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CS_MY_CHARACTER_INFO& default_instance();

  static inline const CS_MY_CHARACTER_INFO* internal_default_instance() {
    return reinterpret_cast<const CS_MY_CHARACTER_INFO*>(
               &_CS_MY_CHARACTER_INFO_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(CS_MY_CHARACTER_INFO* other);

  // implements Message ----------------------------------------------

  inline CS_MY_CHARACTER_INFO* New() const PROTOBUF_FINAL { return New(NULL); }

  CS_MY_CHARACTER_INFO* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CS_MY_CHARACTER_INFO& from);
  void MergeFrom(const CS_MY_CHARACTER_INFO& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CS_MY_CHARACTER_INFO* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:LOBBY.CS_MY_CHARACTER_INFO)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_LOBBY_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SC_MY_CHARACTER_INFO : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LOBBY.SC_MY_CHARACTER_INFO) */ {
 public:
  SC_MY_CHARACTER_INFO();
  virtual ~SC_MY_CHARACTER_INFO();

  SC_MY_CHARACTER_INFO(const SC_MY_CHARACTER_INFO& from);

  inline SC_MY_CHARACTER_INFO& operator=(const SC_MY_CHARACTER_INFO& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_MY_CHARACTER_INFO& default_instance();

  static inline const SC_MY_CHARACTER_INFO* internal_default_instance() {
    return reinterpret_cast<const SC_MY_CHARACTER_INFO*>(
               &_SC_MY_CHARACTER_INFO_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(SC_MY_CHARACTER_INFO* other);

  // implements Message ----------------------------------------------

  inline SC_MY_CHARACTER_INFO* New() const PROTOBUF_FINAL { return New(NULL); }

  SC_MY_CHARACTER_INFO* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SC_MY_CHARACTER_INFO& from);
  void MergeFrom(const SC_MY_CHARACTER_INFO& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SC_MY_CHARACTER_INFO* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .LOBBY.CHARACTER_INFO character_infos = 3;
  int character_infos_size() const;
  void clear_character_infos();
  static const int kCharacterInfosFieldNumber = 3;
  const ::LOBBY::CHARACTER_INFO& character_infos(int index) const;
  ::LOBBY::CHARACTER_INFO* mutable_character_infos(int index);
  ::LOBBY::CHARACTER_INFO* add_character_infos();
  ::google::protobuf::RepeatedPtrField< ::LOBBY::CHARACTER_INFO >*
      mutable_character_infos();
  const ::google::protobuf::RepeatedPtrField< ::LOBBY::CHARACTER_INFO >&
      character_infos() const;

  // string ec = 2;
  void clear_ec();
  static const int kEcFieldNumber = 2;
  const ::std::string& ec() const;
  void set_ec(const ::std::string& value);
  #if LANG_CXX11
  void set_ec(::std::string&& value);
  #endif
  void set_ec(const char* value);
  void set_ec(const char* value, size_t size);
  ::std::string* mutable_ec();
  ::std::string* release_ec();
  void set_allocated_ec(::std::string* ec);

  // bool result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:LOBBY.SC_MY_CHARACTER_INFO)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::LOBBY::CHARACTER_INFO > character_infos_;
  ::google::protobuf::internal::ArenaStringPtr ec_;
  bool result_;
  mutable int _cached_size_;
  friend struct protobuf_LOBBY_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CS_CHARACTER_UPGRADE : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LOBBY.CS_CHARACTER_UPGRADE) */ {
 public:
  CS_CHARACTER_UPGRADE();
  virtual ~CS_CHARACTER_UPGRADE();

  CS_CHARACTER_UPGRADE(const CS_CHARACTER_UPGRADE& from);

  inline CS_CHARACTER_UPGRADE& operator=(const CS_CHARACTER_UPGRADE& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CS_CHARACTER_UPGRADE& default_instance();

  static inline const CS_CHARACTER_UPGRADE* internal_default_instance() {
    return reinterpret_cast<const CS_CHARACTER_UPGRADE*>(
               &_CS_CHARACTER_UPGRADE_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(CS_CHARACTER_UPGRADE* other);

  // implements Message ----------------------------------------------

  inline CS_CHARACTER_UPGRADE* New() const PROTOBUF_FINAL { return New(NULL); }

  CS_CHARACTER_UPGRADE* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CS_CHARACTER_UPGRADE& from);
  void MergeFrom(const CS_CHARACTER_UPGRADE& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CS_CHARACTER_UPGRADE* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // int32 upgrade_type = 2;
  void clear_upgrade_type();
  static const int kUpgradeTypeFieldNumber = 2;
  ::google::protobuf::int32 upgrade_type() const;
  void set_upgrade_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:LOBBY.CS_CHARACTER_UPGRADE)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 upgrade_type_;
  mutable int _cached_size_;
  friend struct protobuf_LOBBY_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SC_CHARACTER_UPGRADE : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LOBBY.SC_CHARACTER_UPGRADE) */ {
 public:
  SC_CHARACTER_UPGRADE();
  virtual ~SC_CHARACTER_UPGRADE();

  SC_CHARACTER_UPGRADE(const SC_CHARACTER_UPGRADE& from);

  inline SC_CHARACTER_UPGRADE& operator=(const SC_CHARACTER_UPGRADE& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_CHARACTER_UPGRADE& default_instance();

  static inline const SC_CHARACTER_UPGRADE* internal_default_instance() {
    return reinterpret_cast<const SC_CHARACTER_UPGRADE*>(
               &_SC_CHARACTER_UPGRADE_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(SC_CHARACTER_UPGRADE* other);

  // implements Message ----------------------------------------------

  inline SC_CHARACTER_UPGRADE* New() const PROTOBUF_FINAL { return New(NULL); }

  SC_CHARACTER_UPGRADE* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SC_CHARACTER_UPGRADE& from);
  void MergeFrom(const SC_CHARACTER_UPGRADE& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SC_CHARACTER_UPGRADE* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ec = 2;
  void clear_ec();
  static const int kEcFieldNumber = 2;
  const ::std::string& ec() const;
  void set_ec(const ::std::string& value);
  #if LANG_CXX11
  void set_ec(::std::string&& value);
  #endif
  void set_ec(const char* value);
  void set_ec(const char* value, size_t size);
  ::std::string* mutable_ec();
  ::std::string* release_ec();
  void set_allocated_ec(::std::string* ec);

  // bool result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:LOBBY.SC_CHARACTER_UPGRADE)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ec_;
  bool result_;
  mutable int _cached_size_;
  friend struct protobuf_LOBBY_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CS_CHARACTER_SELECT : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LOBBY.CS_CHARACTER_SELECT) */ {
 public:
  CS_CHARACTER_SELECT();
  virtual ~CS_CHARACTER_SELECT();

  CS_CHARACTER_SELECT(const CS_CHARACTER_SELECT& from);

  inline CS_CHARACTER_SELECT& operator=(const CS_CHARACTER_SELECT& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CS_CHARACTER_SELECT& default_instance();

  static inline const CS_CHARACTER_SELECT* internal_default_instance() {
    return reinterpret_cast<const CS_CHARACTER_SELECT*>(
               &_CS_CHARACTER_SELECT_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(CS_CHARACTER_SELECT* other);

  // implements Message ----------------------------------------------

  inline CS_CHARACTER_SELECT* New() const PROTOBUF_FINAL { return New(NULL); }

  CS_CHARACTER_SELECT* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CS_CHARACTER_SELECT& from);
  void MergeFrom(const CS_CHARACTER_SELECT& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CS_CHARACTER_SELECT* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:LOBBY.CS_CHARACTER_SELECT)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 type_;
  mutable int _cached_size_;
  friend struct protobuf_LOBBY_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SC_CHARACTER_SELECT : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LOBBY.SC_CHARACTER_SELECT) */ {
 public:
  SC_CHARACTER_SELECT();
  virtual ~SC_CHARACTER_SELECT();

  SC_CHARACTER_SELECT(const SC_CHARACTER_SELECT& from);

  inline SC_CHARACTER_SELECT& operator=(const SC_CHARACTER_SELECT& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_CHARACTER_SELECT& default_instance();

  static inline const SC_CHARACTER_SELECT* internal_default_instance() {
    return reinterpret_cast<const SC_CHARACTER_SELECT*>(
               &_SC_CHARACTER_SELECT_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(SC_CHARACTER_SELECT* other);

  // implements Message ----------------------------------------------

  inline SC_CHARACTER_SELECT* New() const PROTOBUF_FINAL { return New(NULL); }

  SC_CHARACTER_SELECT* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SC_CHARACTER_SELECT& from);
  void MergeFrom(const SC_CHARACTER_SELECT& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SC_CHARACTER_SELECT* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ec = 2;
  void clear_ec();
  static const int kEcFieldNumber = 2;
  const ::std::string& ec() const;
  void set_ec(const ::std::string& value);
  #if LANG_CXX11
  void set_ec(::std::string&& value);
  #endif
  void set_ec(const char* value);
  void set_ec(const char* value, size_t size);
  ::std::string* mutable_ec();
  ::std::string* release_ec();
  void set_allocated_ec(::std::string* ec);

  // bool result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  bool result() const;
  void set_result(bool value);

  // int32 type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:LOBBY.SC_CHARACTER_SELECT)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ec_;
  bool result_;
  ::google::protobuf::int32 type_;
  mutable int _cached_size_;
  friend struct protobuf_LOBBY_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_LOG_IN

// string id = 1;
inline void CS_LOG_IN::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CS_LOG_IN::id() const {
  // @@protoc_insertion_point(field_get:LOBBY.CS_LOG_IN.id)
  return id_.GetNoArena();
}
inline void CS_LOG_IN::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LOBBY.CS_LOG_IN.id)
}
#if LANG_CXX11
inline void CS_LOG_IN::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LOBBY.CS_LOG_IN.id)
}
#endif
inline void CS_LOG_IN::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LOBBY.CS_LOG_IN.id)
}
inline void CS_LOG_IN::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LOBBY.CS_LOG_IN.id)
}
inline ::std::string* CS_LOG_IN::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:LOBBY.CS_LOG_IN.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CS_LOG_IN::release_id() {
  // @@protoc_insertion_point(field_release:LOBBY.CS_LOG_IN.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CS_LOG_IN::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:LOBBY.CS_LOG_IN.id)
}

// string password = 2;
inline void CS_LOG_IN::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CS_LOG_IN::password() const {
  // @@protoc_insertion_point(field_get:LOBBY.CS_LOG_IN.password)
  return password_.GetNoArena();
}
inline void CS_LOG_IN::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LOBBY.CS_LOG_IN.password)
}
#if LANG_CXX11
inline void CS_LOG_IN::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LOBBY.CS_LOG_IN.password)
}
#endif
inline void CS_LOG_IN::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LOBBY.CS_LOG_IN.password)
}
inline void CS_LOG_IN::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LOBBY.CS_LOG_IN.password)
}
inline ::std::string* CS_LOG_IN::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:LOBBY.CS_LOG_IN.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CS_LOG_IN::release_password() {
  // @@protoc_insertion_point(field_release:LOBBY.CS_LOG_IN.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CS_LOG_IN::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:LOBBY.CS_LOG_IN.password)
}

// -------------------------------------------------------------------

// SC_LOG_IN

// bool result = 1;
inline void SC_LOG_IN::clear_result() {
  result_ = false;
}
inline bool SC_LOG_IN::result() const {
  // @@protoc_insertion_point(field_get:LOBBY.SC_LOG_IN.result)
  return result_;
}
inline void SC_LOG_IN::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:LOBBY.SC_LOG_IN.result)
}

// int64 timestamp = 2;
inline void SC_LOG_IN::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SC_LOG_IN::timestamp() const {
  // @@protoc_insertion_point(field_get:LOBBY.SC_LOG_IN.timestamp)
  return timestamp_;
}
inline void SC_LOG_IN::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:LOBBY.SC_LOG_IN.timestamp)
}

// string nickname = 3;
inline void SC_LOG_IN::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SC_LOG_IN::nickname() const {
  // @@protoc_insertion_point(field_get:LOBBY.SC_LOG_IN.nickname)
  return nickname_.GetNoArena();
}
inline void SC_LOG_IN::set_nickname(const ::std::string& value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LOBBY.SC_LOG_IN.nickname)
}
#if LANG_CXX11
inline void SC_LOG_IN::set_nickname(::std::string&& value) {
  
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LOBBY.SC_LOG_IN.nickname)
}
#endif
inline void SC_LOG_IN::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LOBBY.SC_LOG_IN.nickname)
}
inline void SC_LOG_IN::set_nickname(const char* value, size_t size) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LOBBY.SC_LOG_IN.nickname)
}
inline ::std::string* SC_LOG_IN::mutable_nickname() {
  
  // @@protoc_insertion_point(field_mutable:LOBBY.SC_LOG_IN.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SC_LOG_IN::release_nickname() {
  // @@protoc_insertion_point(field_release:LOBBY.SC_LOG_IN.nickname)
  
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SC_LOG_IN::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    
  } else {
    
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:LOBBY.SC_LOG_IN.nickname)
}

// int32 medal_count = 4;
inline void SC_LOG_IN::clear_medal_count() {
  medal_count_ = 0;
}
inline ::google::protobuf::int32 SC_LOG_IN::medal_count() const {
  // @@protoc_insertion_point(field_get:LOBBY.SC_LOG_IN.medal_count)
  return medal_count_;
}
inline void SC_LOG_IN::set_medal_count(::google::protobuf::int32 value) {
  
  medal_count_ = value;
  // @@protoc_insertion_point(field_set:LOBBY.SC_LOG_IN.medal_count)
}

// int32 coin_count = 5;
inline void SC_LOG_IN::clear_coin_count() {
  coin_count_ = 0;
}
inline ::google::protobuf::int32 SC_LOG_IN::coin_count() const {
  // @@protoc_insertion_point(field_get:LOBBY.SC_LOG_IN.coin_count)
  return coin_count_;
}
inline void SC_LOG_IN::set_coin_count(::google::protobuf::int32 value) {
  
  coin_count_ = value;
  // @@protoc_insertion_point(field_set:LOBBY.SC_LOG_IN.coin_count)
}

// int32 character_type = 6;
inline void SC_LOG_IN::clear_character_type() {
  character_type_ = 0;
}
inline ::google::protobuf::int32 SC_LOG_IN::character_type() const {
  // @@protoc_insertion_point(field_get:LOBBY.SC_LOG_IN.character_type)
  return character_type_;
}
inline void SC_LOG_IN::set_character_type(::google::protobuf::int32 value) {
  
  character_type_ = value;
  // @@protoc_insertion_point(field_set:LOBBY.SC_LOG_IN.character_type)
}

// -------------------------------------------------------------------

// FIELD_INFO

// int32 field_id = 1;
inline void FIELD_INFO::clear_field_id() {
  field_id_ = 0;
}
inline ::google::protobuf::int32 FIELD_INFO::field_id() const {
  // @@protoc_insertion_point(field_get:LOBBY.FIELD_INFO.field_id)
  return field_id_;
}
inline void FIELD_INFO::set_field_id(::google::protobuf::int32 value) {
  
  field_id_ = value;
  // @@protoc_insertion_point(field_set:LOBBY.FIELD_INFO.field_id)
}

// int32 user_count = 2;
inline void FIELD_INFO::clear_user_count() {
  user_count_ = 0;
}
inline ::google::protobuf::int32 FIELD_INFO::user_count() const {
  // @@protoc_insertion_point(field_get:LOBBY.FIELD_INFO.user_count)
  return user_count_;
}
inline void FIELD_INFO::set_user_count(::google::protobuf::int32 value) {
  
  user_count_ = value;
  // @@protoc_insertion_point(field_set:LOBBY.FIELD_INFO.user_count)
}

// int32 max_user_count = 3;
inline void FIELD_INFO::clear_max_user_count() {
  max_user_count_ = 0;
}
inline ::google::protobuf::int32 FIELD_INFO::max_user_count() const {
  // @@protoc_insertion_point(field_get:LOBBY.FIELD_INFO.max_user_count)
  return max_user_count_;
}
inline void FIELD_INFO::set_max_user_count(::google::protobuf::int32 value) {
  
  max_user_count_ = value;
  // @@protoc_insertion_point(field_set:LOBBY.FIELD_INFO.max_user_count)
}

// -------------------------------------------------------------------

// CS_FIELD_LIST

// -------------------------------------------------------------------

// SC_FIELD_LIST

// bool result = 1;
inline void SC_FIELD_LIST::clear_result() {
  result_ = false;
}
inline bool SC_FIELD_LIST::result() const {
  // @@protoc_insertion_point(field_get:LOBBY.SC_FIELD_LIST.result)
  return result_;
}
inline void SC_FIELD_LIST::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:LOBBY.SC_FIELD_LIST.result)
}

// repeated .LOBBY.FIELD_INFO field_infos = 2;
inline int SC_FIELD_LIST::field_infos_size() const {
  return field_infos_.size();
}
inline void SC_FIELD_LIST::clear_field_infos() {
  field_infos_.Clear();
}
inline const ::LOBBY::FIELD_INFO& SC_FIELD_LIST::field_infos(int index) const {
  // @@protoc_insertion_point(field_get:LOBBY.SC_FIELD_LIST.field_infos)
  return field_infos_.Get(index);
}
inline ::LOBBY::FIELD_INFO* SC_FIELD_LIST::mutable_field_infos(int index) {
  // @@protoc_insertion_point(field_mutable:LOBBY.SC_FIELD_LIST.field_infos)
  return field_infos_.Mutable(index);
}
inline ::LOBBY::FIELD_INFO* SC_FIELD_LIST::add_field_infos() {
  // @@protoc_insertion_point(field_add:LOBBY.SC_FIELD_LIST.field_infos)
  return field_infos_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::LOBBY::FIELD_INFO >*
SC_FIELD_LIST::mutable_field_infos() {
  // @@protoc_insertion_point(field_mutable_list:LOBBY.SC_FIELD_LIST.field_infos)
  return &field_infos_;
}
inline const ::google::protobuf::RepeatedPtrField< ::LOBBY::FIELD_INFO >&
SC_FIELD_LIST::field_infos() const {
  // @@protoc_insertion_point(field_list:LOBBY.SC_FIELD_LIST.field_infos)
  return field_infos_;
}

// -------------------------------------------------------------------

// CS_ENTER_FIELD

// int32 field_id = 1;
inline void CS_ENTER_FIELD::clear_field_id() {
  field_id_ = 0;
}
inline ::google::protobuf::int32 CS_ENTER_FIELD::field_id() const {
  // @@protoc_insertion_point(field_get:LOBBY.CS_ENTER_FIELD.field_id)
  return field_id_;
}
inline void CS_ENTER_FIELD::set_field_id(::google::protobuf::int32 value) {
  
  field_id_ = value;
  // @@protoc_insertion_point(field_set:LOBBY.CS_ENTER_FIELD.field_id)
}

// -------------------------------------------------------------------

// SC_ENTER_FIELD

// bool result = 1;
inline void SC_ENTER_FIELD::clear_result() {
  result_ = false;
}
inline bool SC_ENTER_FIELD::result() const {
  // @@protoc_insertion_point(field_get:LOBBY.SC_ENTER_FIELD.result)
  return result_;
}
inline void SC_ENTER_FIELD::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:LOBBY.SC_ENTER_FIELD.result)
}

// int32 field_id = 2;
inline void SC_ENTER_FIELD::clear_field_id() {
  field_id_ = 0;
}
inline ::google::protobuf::int32 SC_ENTER_FIELD::field_id() const {
  // @@protoc_insertion_point(field_get:LOBBY.SC_ENTER_FIELD.field_id)
  return field_id_;
}
inline void SC_ENTER_FIELD::set_field_id(::google::protobuf::int32 value) {
  
  field_id_ = value;
  // @@protoc_insertion_point(field_set:LOBBY.SC_ENTER_FIELD.field_id)
}

// string ec = 3;
inline void SC_ENTER_FIELD::clear_ec() {
  ec_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SC_ENTER_FIELD::ec() const {
  // @@protoc_insertion_point(field_get:LOBBY.SC_ENTER_FIELD.ec)
  return ec_.GetNoArena();
}
inline void SC_ENTER_FIELD::set_ec(const ::std::string& value) {
  
  ec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LOBBY.SC_ENTER_FIELD.ec)
}
#if LANG_CXX11
inline void SC_ENTER_FIELD::set_ec(::std::string&& value) {
  
  ec_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LOBBY.SC_ENTER_FIELD.ec)
}
#endif
inline void SC_ENTER_FIELD::set_ec(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LOBBY.SC_ENTER_FIELD.ec)
}
inline void SC_ENTER_FIELD::set_ec(const char* value, size_t size) {
  
  ec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LOBBY.SC_ENTER_FIELD.ec)
}
inline ::std::string* SC_ENTER_FIELD::mutable_ec() {
  
  // @@protoc_insertion_point(field_mutable:LOBBY.SC_ENTER_FIELD.ec)
  return ec_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SC_ENTER_FIELD::release_ec() {
  // @@protoc_insertion_point(field_release:LOBBY.SC_ENTER_FIELD.ec)
  
  return ec_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SC_ENTER_FIELD::set_allocated_ec(::std::string* ec) {
  if (ec != NULL) {
    
  } else {
    
  }
  ec_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ec);
  // @@protoc_insertion_point(field_set_allocated:LOBBY.SC_ENTER_FIELD.ec)
}

// -------------------------------------------------------------------

// CS_LEAVE_FIELD

// int32 field_id = 1;
inline void CS_LEAVE_FIELD::clear_field_id() {
  field_id_ = 0;
}
inline ::google::protobuf::int32 CS_LEAVE_FIELD::field_id() const {
  // @@protoc_insertion_point(field_get:LOBBY.CS_LEAVE_FIELD.field_id)
  return field_id_;
}
inline void CS_LEAVE_FIELD::set_field_id(::google::protobuf::int32 value) {
  
  field_id_ = value;
  // @@protoc_insertion_point(field_set:LOBBY.CS_LEAVE_FIELD.field_id)
}

// -------------------------------------------------------------------

// SC_LEAVE_FIELD

// bool result = 1;
inline void SC_LEAVE_FIELD::clear_result() {
  result_ = false;
}
inline bool SC_LEAVE_FIELD::result() const {
  // @@protoc_insertion_point(field_get:LOBBY.SC_LEAVE_FIELD.result)
  return result_;
}
inline void SC_LEAVE_FIELD::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:LOBBY.SC_LEAVE_FIELD.result)
}

// string ec = 2;
inline void SC_LEAVE_FIELD::clear_ec() {
  ec_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SC_LEAVE_FIELD::ec() const {
  // @@protoc_insertion_point(field_get:LOBBY.SC_LEAVE_FIELD.ec)
  return ec_.GetNoArena();
}
inline void SC_LEAVE_FIELD::set_ec(const ::std::string& value) {
  
  ec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LOBBY.SC_LEAVE_FIELD.ec)
}
#if LANG_CXX11
inline void SC_LEAVE_FIELD::set_ec(::std::string&& value) {
  
  ec_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LOBBY.SC_LEAVE_FIELD.ec)
}
#endif
inline void SC_LEAVE_FIELD::set_ec(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LOBBY.SC_LEAVE_FIELD.ec)
}
inline void SC_LEAVE_FIELD::set_ec(const char* value, size_t size) {
  
  ec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LOBBY.SC_LEAVE_FIELD.ec)
}
inline ::std::string* SC_LEAVE_FIELD::mutable_ec() {
  
  // @@protoc_insertion_point(field_mutable:LOBBY.SC_LEAVE_FIELD.ec)
  return ec_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SC_LEAVE_FIELD::release_ec() {
  // @@protoc_insertion_point(field_release:LOBBY.SC_LEAVE_FIELD.ec)
  
  return ec_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SC_LEAVE_FIELD::set_allocated_ec(::std::string* ec) {
  if (ec != NULL) {
    
  } else {
    
  }
  ec_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ec);
  // @@protoc_insertion_point(field_set_allocated:LOBBY.SC_LEAVE_FIELD.ec)
}

// -------------------------------------------------------------------

// CS_PURCHASE_CHARACTER

// int32 character_type = 1;
inline void CS_PURCHASE_CHARACTER::clear_character_type() {
  character_type_ = 0;
}
inline ::google::protobuf::int32 CS_PURCHASE_CHARACTER::character_type() const {
  // @@protoc_insertion_point(field_get:LOBBY.CS_PURCHASE_CHARACTER.character_type)
  return character_type_;
}
inline void CS_PURCHASE_CHARACTER::set_character_type(::google::protobuf::int32 value) {
  
  character_type_ = value;
  // @@protoc_insertion_point(field_set:LOBBY.CS_PURCHASE_CHARACTER.character_type)
}

// -------------------------------------------------------------------

// SC_PURCHASE_CHARACTER

// int32 medal_count = 1;
inline void SC_PURCHASE_CHARACTER::clear_medal_count() {
  medal_count_ = 0;
}
inline ::google::protobuf::int32 SC_PURCHASE_CHARACTER::medal_count() const {
  // @@protoc_insertion_point(field_get:LOBBY.SC_PURCHASE_CHARACTER.medal_count)
  return medal_count_;
}
inline void SC_PURCHASE_CHARACTER::set_medal_count(::google::protobuf::int32 value) {
  
  medal_count_ = value;
  // @@protoc_insertion_point(field_set:LOBBY.SC_PURCHASE_CHARACTER.medal_count)
}

// int32 coin_count = 2;
inline void SC_PURCHASE_CHARACTER::clear_coin_count() {
  coin_count_ = 0;
}
inline ::google::protobuf::int32 SC_PURCHASE_CHARACTER::coin_count() const {
  // @@protoc_insertion_point(field_get:LOBBY.SC_PURCHASE_CHARACTER.coin_count)
  return coin_count_;
}
inline void SC_PURCHASE_CHARACTER::set_coin_count(::google::protobuf::int32 value) {
  
  coin_count_ = value;
  // @@protoc_insertion_point(field_set:LOBBY.SC_PURCHASE_CHARACTER.coin_count)
}

// bool result = 3;
inline void SC_PURCHASE_CHARACTER::clear_result() {
  result_ = false;
}
inline bool SC_PURCHASE_CHARACTER::result() const {
  // @@protoc_insertion_point(field_get:LOBBY.SC_PURCHASE_CHARACTER.result)
  return result_;
}
inline void SC_PURCHASE_CHARACTER::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:LOBBY.SC_PURCHASE_CHARACTER.result)
}

// string ec = 4;
inline void SC_PURCHASE_CHARACTER::clear_ec() {
  ec_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SC_PURCHASE_CHARACTER::ec() const {
  // @@protoc_insertion_point(field_get:LOBBY.SC_PURCHASE_CHARACTER.ec)
  return ec_.GetNoArena();
}
inline void SC_PURCHASE_CHARACTER::set_ec(const ::std::string& value) {
  
  ec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LOBBY.SC_PURCHASE_CHARACTER.ec)
}
#if LANG_CXX11
inline void SC_PURCHASE_CHARACTER::set_ec(::std::string&& value) {
  
  ec_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LOBBY.SC_PURCHASE_CHARACTER.ec)
}
#endif
inline void SC_PURCHASE_CHARACTER::set_ec(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LOBBY.SC_PURCHASE_CHARACTER.ec)
}
inline void SC_PURCHASE_CHARACTER::set_ec(const char* value, size_t size) {
  
  ec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LOBBY.SC_PURCHASE_CHARACTER.ec)
}
inline ::std::string* SC_PURCHASE_CHARACTER::mutable_ec() {
  
  // @@protoc_insertion_point(field_mutable:LOBBY.SC_PURCHASE_CHARACTER.ec)
  return ec_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SC_PURCHASE_CHARACTER::release_ec() {
  // @@protoc_insertion_point(field_release:LOBBY.SC_PURCHASE_CHARACTER.ec)
  
  return ec_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SC_PURCHASE_CHARACTER::set_allocated_ec(::std::string* ec) {
  if (ec != NULL) {
    
  } else {
    
  }
  ec_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ec);
  // @@protoc_insertion_point(field_set_allocated:LOBBY.SC_PURCHASE_CHARACTER.ec)
}

// -------------------------------------------------------------------

// CS_CHARACTER_INFO

// int32 character_type = 1;
inline void CS_CHARACTER_INFO::clear_character_type() {
  character_type_ = 0;
}
inline ::google::protobuf::int32 CS_CHARACTER_INFO::character_type() const {
  // @@protoc_insertion_point(field_get:LOBBY.CS_CHARACTER_INFO.character_type)
  return character_type_;
}
inline void CS_CHARACTER_INFO::set_character_type(::google::protobuf::int32 value) {
  
  character_type_ = value;
  // @@protoc_insertion_point(field_set:LOBBY.CS_CHARACTER_INFO.character_type)
}

// -------------------------------------------------------------------

// SC_CHARACTER_INFO

// bool result = 1;
inline void SC_CHARACTER_INFO::clear_result() {
  result_ = false;
}
inline bool SC_CHARACTER_INFO::result() const {
  // @@protoc_insertion_point(field_get:LOBBY.SC_CHARACTER_INFO.result)
  return result_;
}
inline void SC_CHARACTER_INFO::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:LOBBY.SC_CHARACTER_INFO.result)
}

// string ec = 2;
inline void SC_CHARACTER_INFO::clear_ec() {
  ec_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SC_CHARACTER_INFO::ec() const {
  // @@protoc_insertion_point(field_get:LOBBY.SC_CHARACTER_INFO.ec)
  return ec_.GetNoArena();
}
inline void SC_CHARACTER_INFO::set_ec(const ::std::string& value) {
  
  ec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LOBBY.SC_CHARACTER_INFO.ec)
}
#if LANG_CXX11
inline void SC_CHARACTER_INFO::set_ec(::std::string&& value) {
  
  ec_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LOBBY.SC_CHARACTER_INFO.ec)
}
#endif
inline void SC_CHARACTER_INFO::set_ec(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LOBBY.SC_CHARACTER_INFO.ec)
}
inline void SC_CHARACTER_INFO::set_ec(const char* value, size_t size) {
  
  ec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LOBBY.SC_CHARACTER_INFO.ec)
}
inline ::std::string* SC_CHARACTER_INFO::mutable_ec() {
  
  // @@protoc_insertion_point(field_mutable:LOBBY.SC_CHARACTER_INFO.ec)
  return ec_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SC_CHARACTER_INFO::release_ec() {
  // @@protoc_insertion_point(field_release:LOBBY.SC_CHARACTER_INFO.ec)
  
  return ec_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SC_CHARACTER_INFO::set_allocated_ec(::std::string* ec) {
  if (ec != NULL) {
    
  } else {
    
  }
  ec_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ec);
  // @@protoc_insertion_point(field_set_allocated:LOBBY.SC_CHARACTER_INFO.ec)
}

// int32 character_type = 3;
inline void SC_CHARACTER_INFO::clear_character_type() {
  character_type_ = 0;
}
inline ::google::protobuf::int32 SC_CHARACTER_INFO::character_type() const {
  // @@protoc_insertion_point(field_get:LOBBY.SC_CHARACTER_INFO.character_type)
  return character_type_;
}
inline void SC_CHARACTER_INFO::set_character_type(::google::protobuf::int32 value) {
  
  character_type_ = value;
  // @@protoc_insertion_point(field_set:LOBBY.SC_CHARACTER_INFO.character_type)
}

// int32 max_hp = 4;
inline void SC_CHARACTER_INFO::clear_max_hp() {
  max_hp_ = 0;
}
inline ::google::protobuf::int32 SC_CHARACTER_INFO::max_hp() const {
  // @@protoc_insertion_point(field_get:LOBBY.SC_CHARACTER_INFO.max_hp)
  return max_hp_;
}
inline void SC_CHARACTER_INFO::set_max_hp(::google::protobuf::int32 value) {
  
  max_hp_ = value;
  // @@protoc_insertion_point(field_set:LOBBY.SC_CHARACTER_INFO.max_hp)
}

// int32 speed = 5;
inline void SC_CHARACTER_INFO::clear_speed() {
  speed_ = 0;
}
inline ::google::protobuf::int32 SC_CHARACTER_INFO::speed() const {
  // @@protoc_insertion_point(field_get:LOBBY.SC_CHARACTER_INFO.speed)
  return speed_;
}
inline void SC_CHARACTER_INFO::set_speed(::google::protobuf::int32 value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:LOBBY.SC_CHARACTER_INFO.speed)
}

// int32 bullet_speed = 6;
inline void SC_CHARACTER_INFO::clear_bullet_speed() {
  bullet_speed_ = 0;
}
inline ::google::protobuf::int32 SC_CHARACTER_INFO::bullet_speed() const {
  // @@protoc_insertion_point(field_get:LOBBY.SC_CHARACTER_INFO.bullet_speed)
  return bullet_speed_;
}
inline void SC_CHARACTER_INFO::set_bullet_speed(::google::protobuf::int32 value) {
  
  bullet_speed_ = value;
  // @@protoc_insertion_point(field_set:LOBBY.SC_CHARACTER_INFO.bullet_speed)
}

// int32 bullet_power = 7;
inline void SC_CHARACTER_INFO::clear_bullet_power() {
  bullet_power_ = 0;
}
inline ::google::protobuf::int32 SC_CHARACTER_INFO::bullet_power() const {
  // @@protoc_insertion_point(field_get:LOBBY.SC_CHARACTER_INFO.bullet_power)
  return bullet_power_;
}
inline void SC_CHARACTER_INFO::set_bullet_power(::google::protobuf::int32 value) {
  
  bullet_power_ = value;
  // @@protoc_insertion_point(field_set:LOBBY.SC_CHARACTER_INFO.bullet_power)
}

// int32 bullet_distance = 8;
inline void SC_CHARACTER_INFO::clear_bullet_distance() {
  bullet_distance_ = 0;
}
inline ::google::protobuf::int32 SC_CHARACTER_INFO::bullet_distance() const {
  // @@protoc_insertion_point(field_get:LOBBY.SC_CHARACTER_INFO.bullet_distance)
  return bullet_distance_;
}
inline void SC_CHARACTER_INFO::set_bullet_distance(::google::protobuf::int32 value) {
  
  bullet_distance_ = value;
  // @@protoc_insertion_point(field_set:LOBBY.SC_CHARACTER_INFO.bullet_distance)
}

// int32 reload_time = 9;
inline void SC_CHARACTER_INFO::clear_reload_time() {
  reload_time_ = 0;
}
inline ::google::protobuf::int32 SC_CHARACTER_INFO::reload_time() const {
  // @@protoc_insertion_point(field_get:LOBBY.SC_CHARACTER_INFO.reload_time)
  return reload_time_;
}
inline void SC_CHARACTER_INFO::set_reload_time(::google::protobuf::int32 value) {
  
  reload_time_ = value;
  // @@protoc_insertion_point(field_set:LOBBY.SC_CHARACTER_INFO.reload_time)
}

// -------------------------------------------------------------------

// CS_MY_INFO

// -------------------------------------------------------------------

// SC_MY_INFO

// int32 medal_count = 1;
inline void SC_MY_INFO::clear_medal_count() {
  medal_count_ = 0;
}
inline ::google::protobuf::int32 SC_MY_INFO::medal_count() const {
  // @@protoc_insertion_point(field_get:LOBBY.SC_MY_INFO.medal_count)
  return medal_count_;
}
inline void SC_MY_INFO::set_medal_count(::google::protobuf::int32 value) {
  
  medal_count_ = value;
  // @@protoc_insertion_point(field_set:LOBBY.SC_MY_INFO.medal_count)
}

// int32 coin_count = 2;
inline void SC_MY_INFO::clear_coin_count() {
  coin_count_ = 0;
}
inline ::google::protobuf::int32 SC_MY_INFO::coin_count() const {
  // @@protoc_insertion_point(field_get:LOBBY.SC_MY_INFO.coin_count)
  return coin_count_;
}
inline void SC_MY_INFO::set_coin_count(::google::protobuf::int32 value) {
  
  coin_count_ = value;
  // @@protoc_insertion_point(field_set:LOBBY.SC_MY_INFO.coin_count)
}

// bool result = 3;
inline void SC_MY_INFO::clear_result() {
  result_ = false;
}
inline bool SC_MY_INFO::result() const {
  // @@protoc_insertion_point(field_get:LOBBY.SC_MY_INFO.result)
  return result_;
}
inline void SC_MY_INFO::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:LOBBY.SC_MY_INFO.result)
}

// string ec = 4;
inline void SC_MY_INFO::clear_ec() {
  ec_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SC_MY_INFO::ec() const {
  // @@protoc_insertion_point(field_get:LOBBY.SC_MY_INFO.ec)
  return ec_.GetNoArena();
}
inline void SC_MY_INFO::set_ec(const ::std::string& value) {
  
  ec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LOBBY.SC_MY_INFO.ec)
}
#if LANG_CXX11
inline void SC_MY_INFO::set_ec(::std::string&& value) {
  
  ec_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LOBBY.SC_MY_INFO.ec)
}
#endif
inline void SC_MY_INFO::set_ec(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LOBBY.SC_MY_INFO.ec)
}
inline void SC_MY_INFO::set_ec(const char* value, size_t size) {
  
  ec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LOBBY.SC_MY_INFO.ec)
}
inline ::std::string* SC_MY_INFO::mutable_ec() {
  
  // @@protoc_insertion_point(field_mutable:LOBBY.SC_MY_INFO.ec)
  return ec_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SC_MY_INFO::release_ec() {
  // @@protoc_insertion_point(field_release:LOBBY.SC_MY_INFO.ec)
  
  return ec_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SC_MY_INFO::set_allocated_ec(::std::string* ec) {
  if (ec != NULL) {
    
  } else {
    
  }
  ec_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ec);
  // @@protoc_insertion_point(field_set_allocated:LOBBY.SC_MY_INFO.ec)
}

// -------------------------------------------------------------------

// CHARACTER_INFO

// int32 type = 1;
inline void CHARACTER_INFO::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 CHARACTER_INFO::type() const {
  // @@protoc_insertion_point(field_get:LOBBY.CHARACTER_INFO.type)
  return type_;
}
inline void CHARACTER_INFO::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:LOBBY.CHARACTER_INFO.type)
}

// int32 max_hp = 2;
inline void CHARACTER_INFO::clear_max_hp() {
  max_hp_ = 0;
}
inline ::google::protobuf::int32 CHARACTER_INFO::max_hp() const {
  // @@protoc_insertion_point(field_get:LOBBY.CHARACTER_INFO.max_hp)
  return max_hp_;
}
inline void CHARACTER_INFO::set_max_hp(::google::protobuf::int32 value) {
  
  max_hp_ = value;
  // @@protoc_insertion_point(field_set:LOBBY.CHARACTER_INFO.max_hp)
}

// int32 speed = 3;
inline void CHARACTER_INFO::clear_speed() {
  speed_ = 0;
}
inline ::google::protobuf::int32 CHARACTER_INFO::speed() const {
  // @@protoc_insertion_point(field_get:LOBBY.CHARACTER_INFO.speed)
  return speed_;
}
inline void CHARACTER_INFO::set_speed(::google::protobuf::int32 value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:LOBBY.CHARACTER_INFO.speed)
}

// int32 bullet_speed = 4;
inline void CHARACTER_INFO::clear_bullet_speed() {
  bullet_speed_ = 0;
}
inline ::google::protobuf::int32 CHARACTER_INFO::bullet_speed() const {
  // @@protoc_insertion_point(field_get:LOBBY.CHARACTER_INFO.bullet_speed)
  return bullet_speed_;
}
inline void CHARACTER_INFO::set_bullet_speed(::google::protobuf::int32 value) {
  
  bullet_speed_ = value;
  // @@protoc_insertion_point(field_set:LOBBY.CHARACTER_INFO.bullet_speed)
}

// int32 bullet_power = 5;
inline void CHARACTER_INFO::clear_bullet_power() {
  bullet_power_ = 0;
}
inline ::google::protobuf::int32 CHARACTER_INFO::bullet_power() const {
  // @@protoc_insertion_point(field_get:LOBBY.CHARACTER_INFO.bullet_power)
  return bullet_power_;
}
inline void CHARACTER_INFO::set_bullet_power(::google::protobuf::int32 value) {
  
  bullet_power_ = value;
  // @@protoc_insertion_point(field_set:LOBBY.CHARACTER_INFO.bullet_power)
}

// int32 bullet_distance = 6;
inline void CHARACTER_INFO::clear_bullet_distance() {
  bullet_distance_ = 0;
}
inline ::google::protobuf::int32 CHARACTER_INFO::bullet_distance() const {
  // @@protoc_insertion_point(field_get:LOBBY.CHARACTER_INFO.bullet_distance)
  return bullet_distance_;
}
inline void CHARACTER_INFO::set_bullet_distance(::google::protobuf::int32 value) {
  
  bullet_distance_ = value;
  // @@protoc_insertion_point(field_set:LOBBY.CHARACTER_INFO.bullet_distance)
}

// int32 reload_time = 7;
inline void CHARACTER_INFO::clear_reload_time() {
  reload_time_ = 0;
}
inline ::google::protobuf::int32 CHARACTER_INFO::reload_time() const {
  // @@protoc_insertion_point(field_get:LOBBY.CHARACTER_INFO.reload_time)
  return reload_time_;
}
inline void CHARACTER_INFO::set_reload_time(::google::protobuf::int32 value) {
  
  reload_time_ = value;
  // @@protoc_insertion_point(field_set:LOBBY.CHARACTER_INFO.reload_time)
}

// -------------------------------------------------------------------

// CS_MY_CHARACTER_INFO

// -------------------------------------------------------------------

// SC_MY_CHARACTER_INFO

// bool result = 1;
inline void SC_MY_CHARACTER_INFO::clear_result() {
  result_ = false;
}
inline bool SC_MY_CHARACTER_INFO::result() const {
  // @@protoc_insertion_point(field_get:LOBBY.SC_MY_CHARACTER_INFO.result)
  return result_;
}
inline void SC_MY_CHARACTER_INFO::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:LOBBY.SC_MY_CHARACTER_INFO.result)
}

// string ec = 2;
inline void SC_MY_CHARACTER_INFO::clear_ec() {
  ec_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SC_MY_CHARACTER_INFO::ec() const {
  // @@protoc_insertion_point(field_get:LOBBY.SC_MY_CHARACTER_INFO.ec)
  return ec_.GetNoArena();
}
inline void SC_MY_CHARACTER_INFO::set_ec(const ::std::string& value) {
  
  ec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LOBBY.SC_MY_CHARACTER_INFO.ec)
}
#if LANG_CXX11
inline void SC_MY_CHARACTER_INFO::set_ec(::std::string&& value) {
  
  ec_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LOBBY.SC_MY_CHARACTER_INFO.ec)
}
#endif
inline void SC_MY_CHARACTER_INFO::set_ec(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LOBBY.SC_MY_CHARACTER_INFO.ec)
}
inline void SC_MY_CHARACTER_INFO::set_ec(const char* value, size_t size) {
  
  ec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LOBBY.SC_MY_CHARACTER_INFO.ec)
}
inline ::std::string* SC_MY_CHARACTER_INFO::mutable_ec() {
  
  // @@protoc_insertion_point(field_mutable:LOBBY.SC_MY_CHARACTER_INFO.ec)
  return ec_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SC_MY_CHARACTER_INFO::release_ec() {
  // @@protoc_insertion_point(field_release:LOBBY.SC_MY_CHARACTER_INFO.ec)
  
  return ec_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SC_MY_CHARACTER_INFO::set_allocated_ec(::std::string* ec) {
  if (ec != NULL) {
    
  } else {
    
  }
  ec_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ec);
  // @@protoc_insertion_point(field_set_allocated:LOBBY.SC_MY_CHARACTER_INFO.ec)
}

// repeated .LOBBY.CHARACTER_INFO character_infos = 3;
inline int SC_MY_CHARACTER_INFO::character_infos_size() const {
  return character_infos_.size();
}
inline void SC_MY_CHARACTER_INFO::clear_character_infos() {
  character_infos_.Clear();
}
inline const ::LOBBY::CHARACTER_INFO& SC_MY_CHARACTER_INFO::character_infos(int index) const {
  // @@protoc_insertion_point(field_get:LOBBY.SC_MY_CHARACTER_INFO.character_infos)
  return character_infos_.Get(index);
}
inline ::LOBBY::CHARACTER_INFO* SC_MY_CHARACTER_INFO::mutable_character_infos(int index) {
  // @@protoc_insertion_point(field_mutable:LOBBY.SC_MY_CHARACTER_INFO.character_infos)
  return character_infos_.Mutable(index);
}
inline ::LOBBY::CHARACTER_INFO* SC_MY_CHARACTER_INFO::add_character_infos() {
  // @@protoc_insertion_point(field_add:LOBBY.SC_MY_CHARACTER_INFO.character_infos)
  return character_infos_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::LOBBY::CHARACTER_INFO >*
SC_MY_CHARACTER_INFO::mutable_character_infos() {
  // @@protoc_insertion_point(field_mutable_list:LOBBY.SC_MY_CHARACTER_INFO.character_infos)
  return &character_infos_;
}
inline const ::google::protobuf::RepeatedPtrField< ::LOBBY::CHARACTER_INFO >&
SC_MY_CHARACTER_INFO::character_infos() const {
  // @@protoc_insertion_point(field_list:LOBBY.SC_MY_CHARACTER_INFO.character_infos)
  return character_infos_;
}

// -------------------------------------------------------------------

// CS_CHARACTER_UPGRADE

// int32 type = 1;
inline void CS_CHARACTER_UPGRADE::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 CS_CHARACTER_UPGRADE::type() const {
  // @@protoc_insertion_point(field_get:LOBBY.CS_CHARACTER_UPGRADE.type)
  return type_;
}
inline void CS_CHARACTER_UPGRADE::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:LOBBY.CS_CHARACTER_UPGRADE.type)
}

// int32 upgrade_type = 2;
inline void CS_CHARACTER_UPGRADE::clear_upgrade_type() {
  upgrade_type_ = 0;
}
inline ::google::protobuf::int32 CS_CHARACTER_UPGRADE::upgrade_type() const {
  // @@protoc_insertion_point(field_get:LOBBY.CS_CHARACTER_UPGRADE.upgrade_type)
  return upgrade_type_;
}
inline void CS_CHARACTER_UPGRADE::set_upgrade_type(::google::protobuf::int32 value) {
  
  upgrade_type_ = value;
  // @@protoc_insertion_point(field_set:LOBBY.CS_CHARACTER_UPGRADE.upgrade_type)
}

// -------------------------------------------------------------------

// SC_CHARACTER_UPGRADE

// bool result = 1;
inline void SC_CHARACTER_UPGRADE::clear_result() {
  result_ = false;
}
inline bool SC_CHARACTER_UPGRADE::result() const {
  // @@protoc_insertion_point(field_get:LOBBY.SC_CHARACTER_UPGRADE.result)
  return result_;
}
inline void SC_CHARACTER_UPGRADE::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:LOBBY.SC_CHARACTER_UPGRADE.result)
}

// string ec = 2;
inline void SC_CHARACTER_UPGRADE::clear_ec() {
  ec_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SC_CHARACTER_UPGRADE::ec() const {
  // @@protoc_insertion_point(field_get:LOBBY.SC_CHARACTER_UPGRADE.ec)
  return ec_.GetNoArena();
}
inline void SC_CHARACTER_UPGRADE::set_ec(const ::std::string& value) {
  
  ec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LOBBY.SC_CHARACTER_UPGRADE.ec)
}
#if LANG_CXX11
inline void SC_CHARACTER_UPGRADE::set_ec(::std::string&& value) {
  
  ec_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LOBBY.SC_CHARACTER_UPGRADE.ec)
}
#endif
inline void SC_CHARACTER_UPGRADE::set_ec(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LOBBY.SC_CHARACTER_UPGRADE.ec)
}
inline void SC_CHARACTER_UPGRADE::set_ec(const char* value, size_t size) {
  
  ec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LOBBY.SC_CHARACTER_UPGRADE.ec)
}
inline ::std::string* SC_CHARACTER_UPGRADE::mutable_ec() {
  
  // @@protoc_insertion_point(field_mutable:LOBBY.SC_CHARACTER_UPGRADE.ec)
  return ec_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SC_CHARACTER_UPGRADE::release_ec() {
  // @@protoc_insertion_point(field_release:LOBBY.SC_CHARACTER_UPGRADE.ec)
  
  return ec_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SC_CHARACTER_UPGRADE::set_allocated_ec(::std::string* ec) {
  if (ec != NULL) {
    
  } else {
    
  }
  ec_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ec);
  // @@protoc_insertion_point(field_set_allocated:LOBBY.SC_CHARACTER_UPGRADE.ec)
}

// -------------------------------------------------------------------

// CS_CHARACTER_SELECT

// int32 type = 1;
inline void CS_CHARACTER_SELECT::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 CS_CHARACTER_SELECT::type() const {
  // @@protoc_insertion_point(field_get:LOBBY.CS_CHARACTER_SELECT.type)
  return type_;
}
inline void CS_CHARACTER_SELECT::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:LOBBY.CS_CHARACTER_SELECT.type)
}

// -------------------------------------------------------------------

// SC_CHARACTER_SELECT

// bool result = 1;
inline void SC_CHARACTER_SELECT::clear_result() {
  result_ = false;
}
inline bool SC_CHARACTER_SELECT::result() const {
  // @@protoc_insertion_point(field_get:LOBBY.SC_CHARACTER_SELECT.result)
  return result_;
}
inline void SC_CHARACTER_SELECT::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:LOBBY.SC_CHARACTER_SELECT.result)
}

// string ec = 2;
inline void SC_CHARACTER_SELECT::clear_ec() {
  ec_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SC_CHARACTER_SELECT::ec() const {
  // @@protoc_insertion_point(field_get:LOBBY.SC_CHARACTER_SELECT.ec)
  return ec_.GetNoArena();
}
inline void SC_CHARACTER_SELECT::set_ec(const ::std::string& value) {
  
  ec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LOBBY.SC_CHARACTER_SELECT.ec)
}
#if LANG_CXX11
inline void SC_CHARACTER_SELECT::set_ec(::std::string&& value) {
  
  ec_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LOBBY.SC_CHARACTER_SELECT.ec)
}
#endif
inline void SC_CHARACTER_SELECT::set_ec(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LOBBY.SC_CHARACTER_SELECT.ec)
}
inline void SC_CHARACTER_SELECT::set_ec(const char* value, size_t size) {
  
  ec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LOBBY.SC_CHARACTER_SELECT.ec)
}
inline ::std::string* SC_CHARACTER_SELECT::mutable_ec() {
  
  // @@protoc_insertion_point(field_mutable:LOBBY.SC_CHARACTER_SELECT.ec)
  return ec_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SC_CHARACTER_SELECT::release_ec() {
  // @@protoc_insertion_point(field_release:LOBBY.SC_CHARACTER_SELECT.ec)
  
  return ec_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SC_CHARACTER_SELECT::set_allocated_ec(::std::string* ec) {
  if (ec != NULL) {
    
  } else {
    
  }
  ec_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ec);
  // @@protoc_insertion_point(field_set_allocated:LOBBY.SC_CHARACTER_SELECT.ec)
}

// int32 type = 3;
inline void SC_CHARACTER_SELECT::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 SC_CHARACTER_SELECT::type() const {
  // @@protoc_insertion_point(field_get:LOBBY.SC_CHARACTER_SELECT.type)
  return type_;
}
inline void SC_CHARACTER_SELECT::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:LOBBY.SC_CHARACTER_SELECT.type)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace LOBBY

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::LOBBY::GameDataType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LOBBY::GameDataType>() {
  return ::LOBBY::GameDataType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_LOBBY_2eproto__INCLUDED
