// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LOBBY.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "LOBBY.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace LOBBY {
class CS_LOG_INDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CS_LOG_IN> {
} _CS_LOG_IN_default_instance_;
class SC_LOG_INDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SC_LOG_IN> {
} _SC_LOG_IN_default_instance_;

namespace protobuf_LOBBY_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_LOG_IN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_LOG_IN, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_LOG_IN, password_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LOG_IN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LOG_IN, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LOG_IN, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LOG_IN, ec_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(CS_LOG_IN)},
  { 7, -1, sizeof(SC_LOG_IN)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CS_LOG_IN_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SC_LOG_IN_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "LOBBY.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace

void TableStruct::Shutdown() {
  _CS_LOG_IN_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _SC_LOG_IN_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _CS_LOG_IN_default_instance_.DefaultConstruct();
  _SC_LOG_IN_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\013LOBBY.proto\022\005LOBBY\")\n\tCS_LOG_IN\022\n\n\002id\030"
      "\001 \001(\t\022\020\n\010password\030\002 \001(\t\":\n\tSC_LOG_IN\022\016\n\006"
      "result\030\001 \001(\010\022\021\n\ttimestamp\030\002 \001(\003\022\n\n\002ec\030\003 "
      "\001(\t*2\n\014GameDataType\022\n\n\006test_1\020\000\022\n\n\006test_"
      "2\020\001\022\n\n\006test_3\020\002b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 183);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "LOBBY.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_LOBBY_2eproto

const ::google::protobuf::EnumDescriptor* GameDataType_descriptor() {
  protobuf_LOBBY_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LOBBY_2eproto::file_level_enum_descriptors[0];
}
bool GameDataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CS_LOG_IN::kIdFieldNumber;
const int CS_LOG_IN::kPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_LOG_IN::CS_LOG_IN()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_LOBBY_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:LOBBY.CS_LOG_IN)
}
CS_LOG_IN::CS_LOG_IN(const CS_LOG_IN& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.password().size() > 0) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  // @@protoc_insertion_point(copy_constructor:LOBBY.CS_LOG_IN)
}

void CS_LOG_IN::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

CS_LOG_IN::~CS_LOG_IN() {
  // @@protoc_insertion_point(destructor:LOBBY.CS_LOG_IN)
  SharedDtor();
}

void CS_LOG_IN::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CS_LOG_IN::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_LOG_IN::descriptor() {
  protobuf_LOBBY_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LOBBY_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CS_LOG_IN& CS_LOG_IN::default_instance() {
  protobuf_LOBBY_2eproto::InitDefaults();
  return *internal_default_instance();
}

CS_LOG_IN* CS_LOG_IN::New(::google::protobuf::Arena* arena) const {
  CS_LOG_IN* n = new CS_LOG_IN;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_LOG_IN::Clear() {
// @@protoc_insertion_point(message_clear_start:LOBBY.CS_LOG_IN)
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CS_LOG_IN::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LOBBY.CS_LOG_IN)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "LOBBY.CS_LOG_IN.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string password = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "LOBBY.CS_LOG_IN.password"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LOBBY.CS_LOG_IN)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LOBBY.CS_LOG_IN)
  return false;
#undef DO_
}

void CS_LOG_IN::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LOBBY.CS_LOG_IN)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LOBBY.CS_LOG_IN.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LOBBY.CS_LOG_IN.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  // @@protoc_insertion_point(serialize_end:LOBBY.CS_LOG_IN)
}

::google::protobuf::uint8* CS_LOG_IN::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LOBBY.CS_LOG_IN)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LOBBY.CS_LOG_IN.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // string password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LOBBY.CS_LOG_IN.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:LOBBY.CS_LOG_IN)
  return target;
}

size_t CS_LOG_IN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LOBBY.CS_LOG_IN)
  size_t total_size = 0;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string password = 2;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_LOG_IN::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LOBBY.CS_LOG_IN)
  GOOGLE_DCHECK_NE(&from, this);
  const CS_LOG_IN* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_LOG_IN>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LOBBY.CS_LOG_IN)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LOBBY.CS_LOG_IN)
    MergeFrom(*source);
  }
}

void CS_LOG_IN::MergeFrom(const CS_LOG_IN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LOBBY.CS_LOG_IN)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
}

void CS_LOG_IN::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LOBBY.CS_LOG_IN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_LOG_IN::CopyFrom(const CS_LOG_IN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LOBBY.CS_LOG_IN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_LOG_IN::IsInitialized() const {
  return true;
}

void CS_LOG_IN::Swap(CS_LOG_IN* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_LOG_IN::InternalSwap(CS_LOG_IN* other) {
  id_.Swap(&other->id_);
  password_.Swap(&other->password_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_LOG_IN::GetMetadata() const {
  protobuf_LOBBY_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LOBBY_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_LOG_IN

// string id = 1;
void CS_LOG_IN::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CS_LOG_IN::id() const {
  // @@protoc_insertion_point(field_get:LOBBY.CS_LOG_IN.id)
  return id_.GetNoArena();
}
void CS_LOG_IN::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LOBBY.CS_LOG_IN.id)
}
#if LANG_CXX11
void CS_LOG_IN::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LOBBY.CS_LOG_IN.id)
}
#endif
void CS_LOG_IN::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LOBBY.CS_LOG_IN.id)
}
void CS_LOG_IN::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LOBBY.CS_LOG_IN.id)
}
::std::string* CS_LOG_IN::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:LOBBY.CS_LOG_IN.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CS_LOG_IN::release_id() {
  // @@protoc_insertion_point(field_release:LOBBY.CS_LOG_IN.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CS_LOG_IN::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:LOBBY.CS_LOG_IN.id)
}

// string password = 2;
void CS_LOG_IN::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CS_LOG_IN::password() const {
  // @@protoc_insertion_point(field_get:LOBBY.CS_LOG_IN.password)
  return password_.GetNoArena();
}
void CS_LOG_IN::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LOBBY.CS_LOG_IN.password)
}
#if LANG_CXX11
void CS_LOG_IN::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LOBBY.CS_LOG_IN.password)
}
#endif
void CS_LOG_IN::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LOBBY.CS_LOG_IN.password)
}
void CS_LOG_IN::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LOBBY.CS_LOG_IN.password)
}
::std::string* CS_LOG_IN::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:LOBBY.CS_LOG_IN.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CS_LOG_IN::release_password() {
  // @@protoc_insertion_point(field_release:LOBBY.CS_LOG_IN.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CS_LOG_IN::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:LOBBY.CS_LOG_IN.password)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SC_LOG_IN::kResultFieldNumber;
const int SC_LOG_IN::kTimestampFieldNumber;
const int SC_LOG_IN::kEcFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_LOG_IN::SC_LOG_IN()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_LOBBY_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:LOBBY.SC_LOG_IN)
}
SC_LOG_IN::SC_LOG_IN(const SC_LOG_IN& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ec_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ec().size() > 0) {
    ec_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ec_);
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&timestamp_) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:LOBBY.SC_LOG_IN)
}

void SC_LOG_IN::SharedCtor() {
  ec_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&timestamp_) + sizeof(result_));
  _cached_size_ = 0;
}

SC_LOG_IN::~SC_LOG_IN() {
  // @@protoc_insertion_point(destructor:LOBBY.SC_LOG_IN)
  SharedDtor();
}

void SC_LOG_IN::SharedDtor() {
  ec_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SC_LOG_IN::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_LOG_IN::descriptor() {
  protobuf_LOBBY_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LOBBY_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SC_LOG_IN& SC_LOG_IN::default_instance() {
  protobuf_LOBBY_2eproto::InitDefaults();
  return *internal_default_instance();
}

SC_LOG_IN* SC_LOG_IN::New(::google::protobuf::Arena* arena) const {
  SC_LOG_IN* n = new SC_LOG_IN;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_LOG_IN::Clear() {
// @@protoc_insertion_point(message_clear_start:LOBBY.SC_LOG_IN)
  ec_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&timestamp_) + sizeof(result_));
}

bool SC_LOG_IN::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LOBBY.SC_LOG_IN)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ec = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ec()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ec().data(), this->ec().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "LOBBY.SC_LOG_IN.ec"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LOBBY.SC_LOG_IN)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LOBBY.SC_LOG_IN)
  return false;
#undef DO_
}

void SC_LOG_IN::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LOBBY.SC_LOG_IN)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->timestamp(), output);
  }

  // string ec = 3;
  if (this->ec().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ec().data(), this->ec().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LOBBY.SC_LOG_IN.ec");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ec(), output);
  }

  // @@protoc_insertion_point(serialize_end:LOBBY.SC_LOG_IN)
}

::google::protobuf::uint8* SC_LOG_IN::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LOBBY.SC_LOG_IN)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->timestamp(), target);
  }

  // string ec = 3;
  if (this->ec().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ec().data(), this->ec().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LOBBY.SC_LOG_IN.ec");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ec(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:LOBBY.SC_LOG_IN)
  return target;
}

size_t SC_LOG_IN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LOBBY.SC_LOG_IN)
  size_t total_size = 0;

  // string ec = 3;
  if (this->ec().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ec());
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // bool result = 1;
  if (this->result() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_LOG_IN::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LOBBY.SC_LOG_IN)
  GOOGLE_DCHECK_NE(&from, this);
  const SC_LOG_IN* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_LOG_IN>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LOBBY.SC_LOG_IN)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LOBBY.SC_LOG_IN)
    MergeFrom(*source);
  }
}

void SC_LOG_IN::MergeFrom(const SC_LOG_IN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LOBBY.SC_LOG_IN)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ec().size() > 0) {

    ec_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ec_);
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void SC_LOG_IN::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LOBBY.SC_LOG_IN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_LOG_IN::CopyFrom(const SC_LOG_IN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LOBBY.SC_LOG_IN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_LOG_IN::IsInitialized() const {
  return true;
}

void SC_LOG_IN::Swap(SC_LOG_IN* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_LOG_IN::InternalSwap(SC_LOG_IN* other) {
  ec_.Swap(&other->ec_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(result_, other->result_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_LOG_IN::GetMetadata() const {
  protobuf_LOBBY_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LOBBY_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_LOG_IN

// bool result = 1;
void SC_LOG_IN::clear_result() {
  result_ = false;
}
bool SC_LOG_IN::result() const {
  // @@protoc_insertion_point(field_get:LOBBY.SC_LOG_IN.result)
  return result_;
}
void SC_LOG_IN::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:LOBBY.SC_LOG_IN.result)
}

// int64 timestamp = 2;
void SC_LOG_IN::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 SC_LOG_IN::timestamp() const {
  // @@protoc_insertion_point(field_get:LOBBY.SC_LOG_IN.timestamp)
  return timestamp_;
}
void SC_LOG_IN::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:LOBBY.SC_LOG_IN.timestamp)
}

// string ec = 3;
void SC_LOG_IN::clear_ec() {
  ec_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SC_LOG_IN::ec() const {
  // @@protoc_insertion_point(field_get:LOBBY.SC_LOG_IN.ec)
  return ec_.GetNoArena();
}
void SC_LOG_IN::set_ec(const ::std::string& value) {
  
  ec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LOBBY.SC_LOG_IN.ec)
}
#if LANG_CXX11
void SC_LOG_IN::set_ec(::std::string&& value) {
  
  ec_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LOBBY.SC_LOG_IN.ec)
}
#endif
void SC_LOG_IN::set_ec(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LOBBY.SC_LOG_IN.ec)
}
void SC_LOG_IN::set_ec(const char* value, size_t size) {
  
  ec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LOBBY.SC_LOG_IN.ec)
}
::std::string* SC_LOG_IN::mutable_ec() {
  
  // @@protoc_insertion_point(field_mutable:LOBBY.SC_LOG_IN.ec)
  return ec_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SC_LOG_IN::release_ec() {
  // @@protoc_insertion_point(field_release:LOBBY.SC_LOG_IN.ec)
  
  return ec_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SC_LOG_IN::set_allocated_ec(::std::string* ec) {
  if (ec != NULL) {
    
  } else {
    
  }
  ec_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ec);
  // @@protoc_insertion_point(field_set_allocated:LOBBY.SC_LOG_IN.ec)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace LOBBY

// @@protoc_insertion_point(global_scope)
